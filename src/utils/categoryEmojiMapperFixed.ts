/**
 * Mapeo de categor√≠as a emojis para visualizaci√≥n en la aplicaci√≥n
 * Los emojis son solo para mostrar en la UI, no se guardan en la base de datos
 */

export interface CategoryEmojiMapping {
  [key: string]: string;
}

// Mapeo por nombre de categor√≠a (insensible a may√∫sculas/min√∫sculas)
// Ordenado de m√°s espec√≠fico a menos espec√≠fico para evitar duplicados
export const CATEGORY_EMOJI_MAP: CategoryEmojiMapping = {
  // Categor√≠as espec√≠ficas de agua (m√°s espec√≠ficas primero)
  'agua turbia': 'üåä',
  'fuga en tuber√≠a': 'üíß',
  'baja presi√≥n': 'üíß',
  'servicio de agua': 'üöø',
  'sin agua': 'üíß',
  
  // Categor√≠as espec√≠ficas de energ√≠a el√©ctrica (m√°s espec√≠ficas primero)
  'energ√≠a el√©ctrica': 'üîã',
  'voltaje irregular': '‚ö°',
  'cortes intermitentes': 'üí°',
  'alumbrado p√∫blico': 'üèÆ',
  'apag√≥n total': 'üåë',
  'cable ca√≠do': 'üîå',
  
  // Categor√≠as espec√≠ficas de infraestructura
  'v√≠as y baches': 'üõ£Ô∏è',
  'infraestructura': 'üèóÔ∏è',
  
  // Categor√≠as espec√≠ficas de servicios
  'recolecci√≥n de basura': 'üóëÔ∏è',
  'servicios p√∫blicos': 'üèõÔ∏è',
  
  // Categor√≠as generales (menos espec√≠ficas)
  'transporte p√∫blico': 'üöç',
  'transporte': 'üöå',
  'seguridad': 'üõ°Ô∏è',
  'medio ambiente': 'üå±',
  'salud': 'üè•',
  'educaci√≥n': 'üè´',
  
  // Palabras clave generales (solo si no hay coincidencia m√°s espec√≠fica)
  'agua': 'üíß',
  'energ√≠a': '‚ö°',
  'basura': '‚ôªÔ∏è',
  'calles': 'üõ§Ô∏è',
  'tr√°fico': 'üöó',
  'parques': 'üèûÔ∏è',
  
  // Otros
  'otros': 'üìù',
  'general': 'üìã'
};

/**
 * Obtiene el emoji correspondiente a una categor√≠a
 * @param categoryName Nombre de la categor√≠a
 * @returns Emoji correspondiente o un emoji por defecto
 */
export function getCategoryEmoji(categoryName: string): string {
  if (!categoryName) return 'üìã';
  
  const normalizedName = categoryName.toLowerCase().trim();
  
  // Buscar coincidencia exacta primero
  if (CATEGORY_EMOJI_MAP[normalizedName]) {
    return CATEGORY_EMOJI_MAP[normalizedName];
  }
  
  // Para evitar duplicados, buscar la coincidencia m√°s espec√≠fica (m√°s larga)
  let bestMatch = '';
  let bestEmoji = 'üìã';
  
  for (const [key, emoji] of Object.entries(CATEGORY_EMOJI_MAP)) {
    if (normalizedName.includes(key) && key.length > bestMatch.length) {
      bestMatch = key;
      bestEmoji = emoji;
    }
  }
  
  if (bestMatch) {
    return bestEmoji;
  }
  
  // Emoji por defecto
  return 'üìã';
}

/**
 * Agrega emoji a un objeto de categor√≠a para visualizaci√≥n
 * @param category Objeto categor√≠a
 * @returns Categor√≠a con emoji agregado
 */
export function addEmojiToCategory<T extends { nombre: string }>(category: T): T & { emoji: string } {
  return {
    ...category,
    emoji: getCategoryEmoji(category.nombre)
  };
}

/**
 * Procesa una lista de categor√≠as agregando emojis
 * @param categories Lista de categor√≠as
 * @returns Lista de categor√≠as con emojis
 */
export function addEmojisToCategories<T extends { nombre: string }>(categories: T[]): (T & { emoji: string })[] {
  return categories.map(addEmojiToCategory);
}
